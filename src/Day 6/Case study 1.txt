Case Study: Telecom Service Management
You are required to design a telecom service management system. This system should manage different types of telecom services, such as prepaid and postpaid plans, using object-oriented programming concepts. Implement the following requirements:

1. Abstract Class: TelecomService
- Define an abstract class named TelecomService with the following private instance variables:
- serviceName (String)
- serviceCost (double)
- serviceDuration (int) - in days
- Include a parameterized constructor to initialize these fields.
- Include abstract methods:
- calculateTotalCost(): Calculate the total cost of the service based on the duration and any additional charges.
- getServiceDetails(): Return the details of the service.
- Include a concrete method applyDiscount(double discountPercentage) to reduce the serviceCost by the given discount percentage.

-----------------------------------------------
If the discount percentage is negative or greater than 100, throw an InvalidDiscountException.
Validate the serviceDuration in the constructor. If the duration is negative, throw an InvalidServiceDurationException.
-----------------------------------------------

2. Interface: Renewable
- Define an interface Renewable with the following method:
- renewService(int additionalDays): Adds the given number of days to the service duration.

-------------------------------------------------
If the additionalDays is negative, throw an InvalidServiceDurationException.
-------------------------------------------------

3. Concrete Classes:
Class PrepaidService:
- Extend TelecomService and implement the Renewable interface.
- Include a private instance variable dataBalance (in GB).
- Implement the calculateTotalCost() method, where the total cost is the serviceCost multiplied by the serviceDuration. If the dataBalance falls below 1 GB, a surcharge of $10 is added.
- Implement the getServiceDetails() method to return a string with service details including data balance.
- Implement the renewService(int additionalDays) method to extend the service duration.

Class PostpaidService:
- Extend TelecomService and implement the Renewable interface.
- Include a private instance variable monthlyLimit (in GB).
- Implement the calculateTotalCost() method, where the total cost is the serviceCost plus an additional $20 if the usage exceeds monthlyLimit.
- Implement the getServiceDetails() method to return a string with service details including monthly limit.
- Implement the renewService(int additionalDays) method to extend the service duration.

-------------------------------------------------------------
 Custom Exceptions:
•	InvalidServiceDurationException: Thrown when a service duration or renewal duration is negative.
•	InvalidDiscountException: Thrown when an invalid discount percentage (negative or greater than 100) is provided.
-------------------------------------------------------------

4. Test Class:
- Create a TestTelecomService class with a main method to test the functionality of both PrepaidService and PostpaidService.
- Create objects for both classes, calculate the total cost, apply a discount, renew the service, and display the service details before and after renewal.

-------------------------------------------------------------

Add following class in Telecom Service Management Case Study :-
Class TelecomCustomer:
•	Define a class TelecomCustomer with the following instance variables:
o	customerName (String)
o	customerID (String)
o	services (List<TelecomService>) - Use a List to manage multiple TelecomService objects associated with the customer. 
•	Include a method addService(TelecomService service) to add a service to the customer's list of services.
•	Include a method calculateTotalCost() to calculate the total cost of all services associated with the customer by iterating over the list of services.
•	Include a method getCustomerDetails() to return a string containing the customer's details and all associated services by iterating over the list of services.

In Test Class :-
Create a TestTelecomService class with a main method to test the functionality of both PrepaidService and PostpaidService.
Use try-catch blocks to handle exceptions while creating objects, applying discounts, and renewing services.
Create a Customer object and add multiple TelecomService objects to it.
Calculate and display the total cost of all services, and renew and apply discounts where applicable.

